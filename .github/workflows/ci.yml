name: Run checks on pull requests and pushes on main branch

on:
  pull_request: {}
  push:
    branches: [main]

jobs:
  tests:
    name: Format Check and Tests
    runs-on: "${{ matrix.os }}"
    continue-on-error: ${{ matrix.experimental }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        python-version: ['3.7', '3.8', '3.9', '3.10']
        experimental: [false]
        include:
          - os: ubuntu-latest
          - os: windows-latest
          - os: macos-latest
    env:
      PYTHON: ${{ matrix.python-version }}
      OS: ${{ matrix.os }}

    steps:
      - uses: actions/checkout@v2

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - name: Get full Python version
        id: full-python-version
        shell: bash
        run: echo ::set-output name=version::$(python -c "import sys; print('-'.join(str(v) for v in sys.version_info))")

      - name: Bootstrap poetry
        shell: bash
        run: |
          curl -sL https://raw.githubusercontent.com/python-poetry/poetry/master/install-poetry.py \
            | python - -y ${{ matrix.bootstrap-args }}
      - name: Update PATH
        if: ${{ matrix.os != 'windows-latest' }}
        shell: bash
        run: echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Update Path for Windows
        if: ${{ matrix.os == 'windows-latest' }}
        shell: bash
        run: echo "$APPDATA\Python\Scripts" >> $GITHUB_PATH

      - name: Configure poetry
        shell: bash
        run: poetry config virtualenvs.in-project true

      - name: Set up cache
        uses: actions/cache@v2
        id: cache
        with:
          path: .venv
          key: venv-${{ runner.os }}-${{ steps.full-python-version.outputs.version }}-${{ hashFiles('**/poetry.lock') }}

      - name: Ensure cache is healthy
        if: steps.cache.outputs.cache-hit == 'true'
        shell: bash
        run: timeout 10s poetry run pip --version || rm -rf .venv

      - name: Install dependencies
        shell: bash
        run: poetry install

      - name: Format check
        shell: bash
        run: poetry run format-check

      - name: Lint
        shell: bash
        run: poetry run lint

      - name: Lint
        shell: bash
        run: poetry run type-check
      
      - name: Unit test
        shell: bash
        run: poetry run test
